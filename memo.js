'use strict';

console.log()      // вывод в консоль в виде строки
console.dir()      // вывод в консоль свойств объекта
console.table()    // вывод в консоль в виде таблицы
eval()             // Встроенная функция eval позволяет выполнять строку кода (например "1+1" => 2, а не 11)

    // ------------------------->>> <<<  МЕТОДЫ СТРОК  >>> <<<----------------------------

    .length        // длинна строки
    .toLowerCase() // возведение в нижний регистр
    .toUpperCase() // возведение в верхний регистр
    .indexOf()     // поиск подстроки (поиск элемнта по индексу)
    .slice(a, b)   // возвращает часть текста, обьекта, массива по заданным инд-м('a'начало(вкл.)-'b'конец(не вкл.))
    .substring()   // то же что и .slise, но не поддерживает отрицательные значения
    .substr()      // то же что и .slise, но второй индекс указывает на длинну отрезка, а не на конеч-й символ
    .trim()        // обрезает пробелы в начале и в конце строки
str.split(s)    // превращает строку в массив (s - разделитель)

// ------------------------->>> <<<  МЕТОДЫ ЧИСЕЛ  >>> <<<-------------------------------- 

Math.round()    /* округление чисел до ближайшего целого. например =>
                => const num = 12.2;
                => console.log(Math.round(num));  <вернёт 12

parseInt() // принимает строку как аргумент. переводит число в другую систему исчисления. например: => 
=> const test = "12.2px";
=> console.log(parseInt(test));  <вернёт 12 как число

parseFloat() // то же что и parseInt, но возвр. значение с плавающей запятой  

if (!(age >= 14 && age <= 90))   то же что и --->>>   if (age < 14 || age > 90)  */

Math.min(a, b, c) /* возвращает меньший из преданных аргументов. Может использоваться для обрезки по
нижней границе. прим--> let x = f(foo);
                        if (x > boundary) {
                        x = boundary;
                        } */

// ------------------------->>> <<<  МЕТОДЫ МАССИВОВ  >>> <<<--------------------------- 

const obj1 = { 0: 15, 1: "10fsd", 2: true, length: 3 }
/* принимает объект, проверяет, является ли он итерируемым
объектом или псевдомассивом, затем создаёт новый массив, копирует туда все элементы и возвр-т его.
Может разбить строку на символы и сохранить в виде массива 
прим--> */

const v = Array.from(obj1)
console.log(v)

arr.push()      // добавляет эл-т в конец массива
arr.pop()       // удаляет эл-т из конца массива и возвр. его
arr.unshift()   // добавялет эл-т в начало массива
arr.shift()     // удаляет эл-т из начала массива и возвращает его
str.split(s)    // превращает строку в массив (s - разделитель)
arr.join(s)     // превращает массив в строку (s- разделитель)
delete arr[]   // удаляет эл-т
arr.splise(index, count, elem)    /* удалить count эл-ов, начиная с index
                                    и заменить на ел-ты elem   */
arr.slice(begin, end) // копирует часть массива с begin до end не включая
arr.sort(fn) // сортирует м-в. Если не передать ф-ю сравнения - сортирует эл-ты как строки
arr.reverse() // меняет порядок эл-ов на обратный
arr.concat(item) // создаёт новый м-в и копирует в него эл-ты из arr и item
const arr = [...arr1, ...arr2] // создаёт НОВЫЙ м-в и копирует в него эл-ты из arr1 и arr2
arr.forEach(element => { // перебирает м-в и вызывает функцию для каждого элемента массива 
    element...
});
for (... of ...) // перебирает все элементы массива
arr.filter()
arr.map(item, index, array) /* вызывает функцию для каждого элемента массива и возвращает
массив результатов выполнения этой функции */

arr.reduce((accum, current) => { }) /* применяет функцию reducer к каждому
элементу массива (слева-направо), возвращая одно результирующее значение */


//<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>//

WeakMap() /* В отличии от Map использует {} в качестве ключей, а не ПРИМИТИВ 
В основном, WeakMap используется в качестве дополнительного хранилища данных 
(прим. из сторонних библ.) */



// ------------------------->>> <<<  МЕТОДЫ ОБЪЕКТОВ  >>> <<<--------------------------- 

Object.keys()      // возвращает все ключи объекта в виде массива строк
this.              /* Значение this – это объект «перед точкой», который используется 
                   для вызова метода и вычисляется во время вызова пример ниже --->>>*/
const obj = {
    name: 'Andrey',
    age: 36,
    hi() {
        alert('Hello, ' + this.name + '!') // открывает доступ к объекту
    }
}
obj.hi();           // выведет 'Hello, Andrey!'

in // не метод, а оператор для проверки наличия ключа в объекте. Пример ниже --->>>
    let user = { name: "John", age: 30 };

alert("age" in user); // true, user.age существует



let options = {
    title: "Menu",
    width: 100,
    height: 200
};
// варианты деструктуризации объекта
let { title, width, height } = options;     // деструктуризация объекта
let { title: t, width: w, height: h } = options; // присвоение значений ключей 
                                                .// переменным с др. именами (t, w, h)
let { title: tt, ...rest } // остаток свойств запишется в пер. rest в виде объекта
alert(title);  // Menu
alert(width);  // 100
alert(height); // 200

// ---------------->>> <<< МЕТОДЫ 'DOM' (ОБЪЕКТНАЯ МООДЕЛЬ ДОКУМЕНТА) >>> <<<---------------

const box = document.getElementById('box'); // возвращает эл-т по ID

const oneHeart = document.querySelector('.circle'); // возв. эл-т по селектору CSS

const btns = document.getElementsByTagName('button')[2];  // возвр. эл-тЫ по тегу 
// в виде псевдомассива(коллекции)(индекс здесь для возврата конкретного эл-та)

const circles = document.getElementsByClassName('circle'); // возвр. эл-тЫ по классу
// в виде псевдомассива(коллекции)

const hearts = document.querySelectorAll('.heart'); // возвр. эл-тЫ по селектору CSS
// в виде псевдомассива(коллекции)

// ------------------------->>> <<<  БОГДАН СТАНЧУК  >>> <<<----------------------------

JSON        //  JAVA SCRIPT OBJECT NOTATION - формат обмена данными  (по сути строка)

JSON.parse()        // метод объекта JSON. Когнвертирует ИЗ формата JSON 
JSON.stringify()    // метод объекта JSON. Когнвертирует В формат JSON 

const fhWithError = () => {
    throw new Error('Some error');// try{} catch{} - блок отлова ошибок
}

try {                             // попытка отработать код в скобках
    fhWithError()
} catch (error) {                 // отлов ошибки в блоке выше и операции с ней
    console.error(error);
    console.log(error.message);  // при отлове ошибок в try{} catch{} код
}                                // после блока будет выполнен

console.log('Contitie...');

    // МЕТОДЫ МАССИВОВ

    .push      // добавляет элемент в конец массива
    .pop       // удаляет элемент из конца массива, а так же возвращает его значение

    .unshift   // добавляе элемент в начало массива
    .shift     // удаляет элемент из начала массива, а так же возвращает его значение

// все эти методы(массивов) мутируют оригинальный массив т.е изменяют его


// МЕТОДЫ ОБЪЕКТОВ

const myObj = {
    a: 1,
    b: true,
    c: { f: true, d: 'asd' }
}

const myObj2 = Object.assign({}, myObj)     /* Object.assign() создаёт копию объекта myObj 
                                               включая ссылки  на вложенные объекты */

const myObj3 = { ...myObj }                 /* ... оператор разделения объект на св-ва
                                               работает по принцыпу Object.assign() */

const myObj4 = JSON.parse(JSON.stringify(myObj)) /* двойная конвертация в/из формат JSON 
        и как следствие абсолютно идентичный объект, но сновыми ссылками на вложенности */


    // ------------------------->>> <<<БОГДАН СТАНЧУК>>> <<<--------------------------------




    < input id = "search" />
<button id="find">find</button>

<script>
    const searchInputElement = document.getElementById('search')
    const lookButtonElement = document.getElementById('find')

    lookButtonElement.addEventListener(lookButtonElement, () => {
        console.log(searchInputElement.value)
    })

/*
Что нужно написать внутри скобок вместо XXX и YYY, чтобы при нажатии на кнопку увидеть текст, введённый в input?
Ответ дайте через пробел.
Пример ответа: firstword secondword
*/

</script>

<script>
    function removeWhitespaces(string) {
         string.split(' ').filter(s => s !== '').join('_')
    }

    console.log(removeWhitespaces('you are JS developer'))
</script>


/* 
1 querySelectorId
2 "it-incubator"
3 searchInputElement lookButtonElement
4 user.name 
*/