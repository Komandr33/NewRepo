'use strict';

console.log()      // вывод в консоль в виде строки
console.dir()      // вывод в консоль свойств объекта
console.table()    // вывод в консоль в виде таблицы

    // ------------------------->>> <<<  МЕТОДЫ СТРОК  >>> <<<--------------------------------

    .length        // длинна строки
    .toLowerCase() // возведение в нижний регистр
    .toUpperCase() // возведение в верхний регистр
    .indexOf()     // поиск подстроки (поиск элемнта по индексу)
    .slice()       // возвращает часть текста, обьекта, массива по заданным индексам(начало(вкл.)-конец(не вкл.))...
    .substring()   // то же что и .slise, но не поддерживает отрицательные значения
    .substr()      // то же что и .slise, но второй индекс указывает на длинну отрезка, а не на конеч-й символ
    .trim()        // обрезает пробелы в начале и в конце строки

// ------------------------->>> <<<  МЕТОДЫ ЧИСЕЛ  >>> <<<-------------------------------- 

Math.round()       /* округление чисел до ближайшего целого. например =>
                   => const num = 12.2;
                   => console.log(Math.round(num));  <вернёт 12
                   parseInt() // переводит число в другую систему исчисления. например: => 
                   parseFloat() // то же что и parseInt только возвращает значение с плавающей запятой  

                   => const test = "12.2px";
                   => console.log(parseInt(test));  <вернёт 12 как число

                   if (!(age >= 14 && age <= 90))   то же что и --->>>   if (age < 14 || age > 90)  */

// ------------------------->>> <<<  МЕТОДЫ ОБЪЕКТОВ  >>> <<<-------------------------------- 

Object.keys()      // возвращает все ключи объекта в виде массива строк
this.              /* Значение this – это объект «перед точкой», который используется 
                   для вызова метода и вычисляется во время вызова пример ниже --->>>*/
const obj = {
    name: 'Andrey',
    age: 36,
    hi() {
        alert('Hello, ' + this.name + '!') // открывает доступ к объекту
    }
}
obj.hi();           // выведет 'Hello, Andrey!'
    in // не метод, а оператор для проверки наличи ключа в объекте. Пример ниже --->>>
    let user = { name: "John", age: 30 };

alert("age" in user); // true, user.age существует

// ------------------------->>> <<<  БОГДАН СТАНЧУК  >>> <<<--------------------------------

JSON        //  JAVA SCRIPT OBJECT NOTATION - формат обмена данными  (по сути строка)

JSON.parse()        // метод объекта JSON. Когнвертирует ИЗ формата JSON 
JSON.stringify()    // метод объекта JSON. Когнвертирует В формат JSON 

const fhWithError = () => {
    throw new Error('Some error');// try{} catch{} - блок отлова ошибок
}

try {                             // попытка отработать код в скобках
    fhWithError()
} catch (error) {                 // отлов ошибки в блоке выше и операции с ней
    console.error(error);
    console.log(error.message);  // при отлове ошибок в try{} catch{} код
}                                // после блока будет выполнен

console.log('Contitie...');

    // МЕТОДЫ МАССИВОВ

    .push      // добавляет элемент в конец массива
    .pop       // удаляет элемент из конца массива, а так же возвращает его значение

    .unshift   // добавляе элемент в начало массива
    .shift     // удаляет элемент из начала массива, а так же возвращает его значение

// все эти методы(массивов) мутируют оригинальный массив т.е изменяют его


// МЕТОДЫ ОБЪЕКТОВ

const myObj = {
    a: 1,
    b: true
}

const myObj2 = Object.assign({}, myObj)     /* Object.assign() создаёт копию объекта myObj 
                                               включая ссылки  на вложенные объекты */

const myObj3 = { ...myObj }                 /* ... оператор разделения объект на св-ва
                                               работает по принцыпу Object.assign() */

const myObj4 = JSON.parse(JSON.stringify(myObj)) /* двойная конвертация в/из формат JSON и как следствие
                                         абсолютно идентичный объект, но сновыми ссылками на вложенности */



// ------------------------->>> <<<БОГДАН СТАНЧУК>>> <<<--------------------------------
